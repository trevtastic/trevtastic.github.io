//
// Navbars
// --------------------------------------------------

@use "sass:math";
@use "../../functions" as fn;
@use "../../variables" as globs;
@use "../../mixins" as mx;


// Wrapper and base class
//
// Provide a static navbar from which we expand to create full-width, fixed, and
// other navbar variations.

.c-navbar {
	position: relative;
	min-height: globs.$navbar-height; // Ensure a navbar always shows (e.g., without a .navbar-brand in collapsed mode)
	margin-bottom: globs.$navbar-margin-bottom;
	border: 1px solid transparent;

	// Prevent floats from breaking the navbar
	@include mx.clearfix;

	@media ( min-width: globs.$grid-float-breakpoint ) {
		border-radius: globs.$navbar-border-radius;
	}
}


// Navbar heading
//
// Groups `.navbar-brand` and `.navbar-toggle` into a single component for easy
// styling of responsive aspects.

.c-navbar__header {
	@include mx.clearfix;

	@media ( min-width: globs.$grid-float-breakpoint ) {
		float: left;
	}
}


// Navbar collapse (body)
//
// Group your navbar content into this for easy collapsing and expanding across
// various device sizes. By default, this content is collapsed when <768px, but
// will expand past that for a horizontal display.
//
// To start (on mobile devices) the navbar links, forms, and buttons are stacked
// vertically and include a `max-height` to overflow in case you have too much
// content for the user's viewport.

.c-navbar__collapse {
	padding-right: globs.$navbar-padding-horizontal;
	padding-left: globs.$navbar-padding-horizontal;
	overflow-x: visible;
	border-top: 1px solid transparent;
	box-shadow: inset 0 fn.pixelc( 1px ) 0 rgba( 255, 255, 255, .1 );
	@include mx.clearfix;
	-webkit-overflow-scrolling: touch;

	&.in {
		overflow-y: auto;
	}

	@media ( min-width: globs.$grid-float-breakpoint )
	{
		width: auto;
		border-top: 0;
		box-shadow: none;

		&.collapse {
			display: block !important;
			height: auto !important;
			padding-bottom: 0; // Override default setting
			overflow: visible !important;
		}

		&.in {
			overflow-y: visible;
		}

		// Undo the collapse side padding for navbars with containers to ensure
		// alignment of right-aligned contents.
		.c-navbar--fixed-top &,
		.c-navbar--static-top &,
		.c-navbar--fixed-bottom & {
			padding-right: 0;
			padding-left: 0;
		}
	}
}

.c-navbar--fixed-top,
.c-navbar--fixed-bottom {

	.c-navbar__collapse {
		max-height: globs.$navbar-collapse-max-height;

		@media ( max-device-width: globs.$screen-xs-min ) and ( orientation: landscape ) {
			max-height: fn.pixelc( 200px );
		}
	}

	// Fix the top/bottom navbars when screen real estate supports it
	position: fixed;
	right: 0;
	left: 0;
	z-index: globs.$zindex-navbar-fixed;

	// Undo the rounded corners
	@media ( min-width: globs.$grid-float-breakpoint ) {
		border-radius: 0;
	}
}

.c-navbar--fixed-top {
	top: 0;
	border-width: 0 0 1px;
}
.c-navbar--fixed-bottom {
	bottom: 0;
	margin-bottom: 0; // override .navbar defaults
	border-width: 1px 0 0;
}


// Both navbar header and collapse
//
// When a container is present, change the behavior of the header and collapse.

.o-container,
.o-container-fluid {

	> .c-navbar__header,
	> .c-navbar__collapse {
		margin-right: -( globs.$navbar-padding-horizontal );
		margin-left: -( globs.$navbar-padding-horizontal );

		@media ( min-width: globs.$grid-float-breakpoint ) {
			margin-right: 0;
			margin-left: 0;
		}
	}
}


//
// Navbar alignment options
//
// Display the navbar across the entirety of the page or fixed it to the top or
// bottom of the page.

// Static top (unfixed, but 100% wide) navbar
.c-navbar--static-top {
	z-index: globs.$zindex-navbar;
	border-width: 0 0 1px;

	@media ( min-width: globs.$grid-float-breakpoint ) {
		border-radius: 0;
	}
}


// Brand/project name

.c-navbar__brand {
	float: left;
	height: globs.$navbar-height;
	padding: globs.$navbar-padding-vertical globs.$navbar-padding-horizontal;
	// font-size: $font-size-large;
	line-height: globs.$line-height-computed;

	&:hover,
	&:focus {
		text-decoration: none;
	}

	> img {
		display: block;
	}

	@media ( min-width: globs.$grid-float-breakpoint ) {

		.c-navbar > .o-container &,
		.c-navbar > .o-container-fluid & {
			margin-left: -( globs.$navbar-padding-horizontal );
		}
	}
}


// Navbar toggle
//
// Custom button for toggling the `.navbar-collapse`, powered by the collapse
// JavaScript plugin.

.c-navbar__toggle {
	position: relative;
	float: right;
	padding: fn.pixelc( 9px ) fn.pixelc( 10px );
	margin-right: globs.$navbar-padding-horizontal;
	@include mx.navbar-vertical-align( fn.pixelc( 34px ) );
	background-color: transparent;
	background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
	border: 1px solid transparent;
	border-radius: globs.$border-radius-base;

	// We remove the `outline` here, but later compensate by attaching `:hover`
	// styles to `:focus`.
	&:focus {
		outline: 0;
	}

	// Bars
	.icon-bar {
		display: block;
		width: fn.pixelc( 22px );
		height: fn.pixelc( 2px );
		border-radius: fn.pixelc( 1px );
	}
	.icon-bar + .icon-bar {
		margin-top: fn.pixelc( 4px );
	}

	@media ( min-width: globs.$grid-float-breakpoint ) {
		display: none;
	}
}


// Navbar nav links
//
// Builds on top of the `.nav` components with its own modifier class to make
// the nav the full height of the horizontal nav (above 768px).

.c-navbar__nav {
	margin: math.div( globs.$navbar-padding-vertical, 2 ) ( -( globs.$navbar-padding-horizontal ) );

	> li > a {
		padding-top: fn.pixelc( 10px );
		padding-bottom: fn.pixelc( 10px );
		line-height: globs.$line-height-computed;
	}

	@media (max-width: globs.$grid-float-breakpoint-max)
	{
		// Dropdowns get custom display when collapsed
		.open .c-dropdown__menu {
			position: static;
			float: none;
			width: auto;
			margin-top: 0;
			background-color: transparent;
			border: 0;
			box-shadow: none;

			> li > a,
			.c-dropdown__header {
				padding: fn.pixelc( 5px ) fn.pixelc( 15px ) fn.pixelc( 5px ) fn.pixelc( 25px );
			}

			> li > a {
				line-height: globs.$line-height-computed;

				&:hover,
				&:focus {
					background-image: none;
				}
			}
		}
	}

	// Uncollapse the nav
	@media ( min-width: globs.$grid-float-breakpoint ) {
		float: left;
		margin: 0;

		> li {
			float: left;

			> a {
				padding-top: globs.$navbar-padding-vertical;
				padding-bottom: globs.$navbar-padding-vertical;
			}
		}
	}
}


// Navbar form
//
// Extension of the `.form-inline` with some extra flavor for optimum display in
// our navbars.

.c-navbar__form {
	padding: fn.pixelc( 10px ) globs.$navbar-padding-horizontal;
	margin-right: -( globs.$navbar-padding-horizontal );
	margin-left: -( globs.$navbar-padding-horizontal );
	border-top: 1px solid transparent;
	border-bottom: 1px solid transparent;
	$shadow: inset 0 fn.pixelc( 1px ) 0 rgba( 255, 255, 255, 0.1 ), 0 fn.pixelc( 1px ) 0 rgba( 255, 255, 255, 0.1 );
	@include mx.box-shadow( $shadow );

	// Mixin behavior for optimum display
	@include mx.form-inline;

	.o-form-group {

		@media ( max-width: globs.$grid-float-breakpoint-max ) {
			margin-bottom: fn.pixelc( 5px );

			&:last-child {
				margin-bottom: 0;
			}
		}
	}

	// Vertically center in expanded, horizontal navbar
	@include mx.navbar-vertical-align( globs.$input-height-base );

	// Undo 100% width for pull classes
	@media ( min-width: globs.$grid-float-breakpoint ) {
		width: auto;
		padding-top: 0;
		padding-bottom: 0;
		margin-right: 0;
		margin-left: 0;
		border: 0;
		@include mx.box-shadow( none );
	}
}


// Dropdown menus

// Menu position and menu carets
.c-navbar__nav > li > .c-dropdown__menu {
	margin-top: 0;
	@include mx.border-top-radius( 0 );
}
// Menu position and menu caret support for dropups via extra dropup class
.c-navbar--fixed-bottom .c-navbar__nav > li > .c-dropdown__menu {
	margin-bottom: 0;
	@include mx.border-top-radius( globs.$navbar-border-radius );
	@include mx.border-bottom-radius( 0 );
}


// Buttons in navbars
//
// Vertically center a button within a navbar (when *not* in a form).

.c-navbar__btn {
	@include mx.navbar-vertical-align( globs.$input-height-base );

	&.btn-sm {
		@include mx.navbar-vertical-align( globs.$input-height-small );
	}

	&.btn-xs {
		@include mx.navbar-vertical-align( 22 );
	}
}


// Text in navbars
//
// Add a class to make any element properly align itself vertically within the navbars.

.c-navbar__text {
	@include mx.navbar-vertical-align( globs.$line-height-computed );

	@media ( min-width: globs.$grid-float-breakpoint ) {
		float: left;
		margin-right: globs.$navbar-padding-horizontal;
		margin-left: globs.$navbar-padding-horizontal;
	}
}


// Component alignment
//
// Repurpose the pull utilities as their own navbar utilities to avoid specificity
// issues with parents and chaining. Only do this when the navbar is uncollapsed
// though so that navbar contents properly stack and align in mobile.
//
// Declared after the navbar components to ensure more specificity on the margins.

@media ( min-width: globs.$grid-float-breakpoint )
{
	.u-navbar-left {
		float: left !important;
	}

	.u-navbar-right {
		float: right !important;
		margin-right: -( globs.$navbar-padding-horizontal );

		~ .u-navbar-right {
			margin-right: 0;
		}
	}
}


// Alternate navbars
// --------------------------------------------------

// Default navbar
.c-navbar--default {
	background-color: globs.$navbar-default-bg;
	border-color: globs.$navbar-default-border;

	.c-navbar__brand {
		color: globs.$navbar-default-brand-color;

		&:hover,
		&:focus {
			color: globs.$navbar-default-brand-hover-color;
			background-color: globs.$navbar-default-brand-hover-bg;
		}
	}

	.c-navbar__text {
		color: globs.$navbar-default-color;
	}

	.c-navbar__nav {

		> li > a {
			color: globs.$navbar-default-link-color;

			&:hover,
			&:focus {
				color: globs.$navbar-default-link-hover-color;
				background-color: globs.$navbar-default-link-hover-bg;
			}
		}

		> .active > a {

			&,
			&:hover,
			&:focus {
				color: globs.$navbar-default-link-active-color;
				background-color: globs.$navbar-default-link-active-bg;
			}
		}

		> .disabled > a {

			&,
			&:hover,
			&:focus {
				color: globs.$navbar-default-link-disabled-color;
				background-color: globs.$navbar-default-link-disabled-bg;
			}
		}

		// Dropdown menu items
		// Remove background color from open dropdown
		> .open > a {

			&,
			&:hover,
			&:focus {
				color: globs.$navbar-default-link-active-color;
				background-color: globs.$navbar-default-link-active-bg;
			}
		}

		@media ( max-width: globs.$grid-float-breakpoint-max )
		{
			// Dropdowns get custom display when collapsed
			.open .c-dropdown__menu {

				> li > a {
					color: globs.$navbar-default-link-color;

					&:hover,
					&:focus {
						color: globs.$navbar-default-link-hover-color;
						background-color: globs.$navbar-default-link-hover-bg;
					}
				}

				> .active > a {

					&,
					&:hover,
					&:focus {
						color: globs.$navbar-default-link-active-color;
						background-color: globs.$navbar-default-link-active-bg;
					}
				}

				> .disabled > a {

					&,
					&:hover,
					&:focus {
						color: globs.$navbar-default-link-disabled-color;
						background-color: globs.$navbar-default-link-disabled-bg;
					}
				}
			}
		}
	}

	.c-navbar__toggle {
		border-color: globs.$navbar-default-toggle-border-color;

		&:hover,
		&:focus {
			background-color: globs.$navbar-default-toggle-hover-bg;
		}

		.icon-bar {
			background-color: globs.$navbar-default-toggle-icon-bar-bg;
		}
	}

	.c-navbar__collapse,
	.c-navbar__form {
		border-color: globs.$navbar-default-border;
	}


	// Links in navbars
	//
	// Add a class to ensure links outside the navbar nav are colored correctly.

	.c-navbar__link {
		color: globs.$navbar-default-link-color;

		&:hover {
			color: globs.$navbar-default-link-hover-color;
		}
	}

	.e-btn--link {
		color: globs.$navbar-default-link-color;

		&:hover,
		&:focus {
			color: globs.$navbar-default-link-hover-color;
		}

		&[ disabled ],
		fieldset[ disabled ] & {

			&:hover,
			&:focus {
				color: globs.$navbar-default-link-disabled-color;
			}
		}
	}
}