@use "../functions" as fn;
@use "../variables" as globs;
@use "border-radius" as mx-bor;
@use "box-shadow" as mx-box;
@use "gradients" as mx-grad;
@use "hover" as mx-hov;
@use "vendor/rfs" as mxv-rfs;

// Button variants
//
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons

@mixin button-variant( $background, $border, $hover-background: darken( $background, 7.5% ), $hover-border: darken( $border, 10% ), $active-background: darken( $background, 10% ), $active-border: darken( $border, 12.5% ) )
{
	color: fn.color-yiq( $background );
	@include mx-grad.gradient-bg( $background );
	border-color: $border;
	@include mx-box.box-shadow( globs.$btn-box-shadow );

	@include mx-hov.hover() {
		color: fn.color-yiq( $hover-background );
		@include mx-grad.gradient-bg( $hover-background );
		border-color: $hover-border;
	}

	&:focus,
	&.focus {
		color: fn.color-yiq( $hover-background );
		@include mx-grad.gradient-bg( $hover-background );
		border-color: $hover-border;
		@if globs.$enable-shadows {
			@include mx-box.box-shadow( globs.$btn-box-shadow, 0 0 0 globs.$btn-focus-width rgba( mix( fn.color-yiq( $background ), $border, 15% ), .5 ) );
		} @else {
			// Avoid using mixin so we can pass custom focus shadow properly
			box-shadow: 0 0 0 globs.$btn-focus-width rgba( mix( fn.color-yiq( $background ), $border, 15% ), .5 );
		}
	}

	// Disabled comes first so active can properly restyle
	&.disabled,
	&:disabled {
		color: fn.color-yiq( $background );
		background-color: $background;
		border-color: $border;
		// Remove CSS gradients if they're enabled
		@if globs.$enable-gradients {
			background-image: none;
		}
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		color: fn.color-yiq( $active-background );
		background-color: $active-background;
		@if globs.$enable-gradients {
			background-image: none; // Remove the gradient for the pressed/active state
		}
		border-color: $active-border;

		&:focus {
			@if globs.$enable-shadows and globs.$btn-active-box-shadow != none {
				@include mx-box.box-shadow( globs.$btn-active-box-shadow, 0 0 0 globs.$btn-focus-width rgba( mix( fn.color-yiq( $background ), $border, 15% ), .5 ) );
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0 0 0 globs.$btn-focus-width rgba( mix( fn.color-yiq( $background ), $border, 15% ), .5 );
			}
		}
	}
}

@mixin button-outline-variant( $color, $color-hover: fn.color-yiq( $color ), $active-background: $color, $active-border: $color )
{
	color: $color;
	border-color: $color;

	@include mx-hov.hover() {
		color: $color-hover;
		background-color: $active-background;
		border-color: $active-border;
	}

	&:focus,
	&.focus {
		box-shadow: 0 0 0 globs.$btn-focus-width rgba( $color, .5 );
	}

	&.disabled,
	&:disabled {
		color: $color;
		background-color: transparent;
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active,
	.show > &.dropdown-toggle {
		color: fn.color-yiq( $active-background );
		background-color: $active-background;
		border-color: $active-border;

		&:focus {
			@if globs.$enable-shadows and globs.$btn-active-box-shadow != none {
				@include mx-box.box-shadow( globs.$btn-active-box-shadow, 0 0 0 globs.$btn-focus-width rgba( $color, .5 ) );
			} @else {
				// Avoid using mixin so we can pass custom focus shadow properly
				box-shadow: 0 0 0 globs.$btn-focus-width rgba( $color, .5 );
			}
		}
	}
}

// Button sizes
@mixin button-size( $padding-y, $padding-x, $font-size, $line-height, $border-radius )
{
	padding: $padding-y $padding-x;
	@include mxv-rfs.font-size( $font-size );
	line-height: $line-height;
	// Manually declare to provide an override to the browser default
	@include mx-bor.border-radius( $border-radius, 0 );
}
